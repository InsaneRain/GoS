{
	"scope": "source.lua",

	"completions":
	[
		"GOS_DIR",
		"SCRIPT_PATH",
		"COMMON_PATH",
		"SPRITE_PATH",
		"SOUNDS_PATH",

		{"trigger": "Load\tCallbackType", "contents": "Load"},
		{"trigger": "UnLoad\tCallbackType", "contents": "UnLoad"},
		{"trigger": "Animation\tCallbackType", "contents": "Animation"},
		{"trigger": "Tick\tCallbackType", "contents": "Tick"},
		{"trigger": "Draw\tCallbackType", "contents": "Draw"},
		{"trigger": "DrawMinimap\tCallbackType", "contents": "DrawMinimap"},
		{"trigger": "WndMsg\tCallbackType", "contents": "WndMsg"},
		{"trigger": "CreateObj\tCallbackType", "contents": "CreateObj"},
		{"trigger": "DeleteObj\tCallbackType", "contents": "DeleteObj"},
		{"trigger": "ProcessSpell\tCallbackType", "contents": "ProcessSpell"},
		{"trigger": "ProcessSpellComplete\tCallbackType", "contents": "ProcessSpellComplete"},
		{"trigger": "ProcessRecall\tCallbackType", "contents": "ProcessRecall"},
		{"trigger": "ObjectLoad\tCallbackType", "contents": "ObjectLoad"},
		{"trigger": "ProcessSpellCast\tCallbackType", "contents": "ProcessSpellCast"},
		{"trigger": "ProcessSpellAttack\tCallbackType", "contents": "ProcessSpellAttack"},
		{"trigger": "ProcessWaypoint\tCallbackType", "contents": "ProcessWaypoint"},
		{"trigger": "ProcessPacket\tCallbackType", "contents": "ProcessPacket"},
		{"trigger": "UpdateBuff\tCallbackType", "contents": "UpdateBuff"},
		{"trigger": "RemoveBuff\tCallbackType", "contents": "RemoveBuff"},
		{"trigger": "GainVision\tCallbackType", "contents": "GainVision"},
		{"trigger": "LoseVision\tCallbackType", "contents": "LoseVision"},
		{"trigger": "IssueOrder\tCallbackType", "contents": "IssueOrder"},
		{"trigger": "SpellCast\tCallbackType", "contents": "SpellCast"},
		{"trigger": "Damage\tCallbackType", "contents": "Damage"},
		{"trigger": "Aggro\tCallbackType", "contents": "Aggro"},

		"OnWndMsg(function(msg, wParam) ${1:$2(msg, wParam) }end)",
		"OnObjectLoad(function(Object) ${1:$2(Object) }end)",
		"OnCreateObj(function(Object) ${1:$2(Object) }end)", 
		"OnDeleteObj(function(Object) ${1:$2(Object) }end)",
		"OnProcessRecall(function(unit, recall) ${1:$2(unit, recall) }end)", 
		"OnProcessSpell(function(unit, spell) ${1:$2(unit, spell) }end)",
		"OnProcessSpellComplete(function(unit, spell) ${1:$2(unit, spell) }end)",
		"OnProcessSpellAttack(function(unit, spell) ${1:$2(unit, spell) }end)",
		"OnProcessSpellCast(function(unit, spell) ${1:$2(unit, spell) }end)", 
		"OnProcessWaypoint(function(unit, waypoint) ${1:$2(unit, waypoint) }end)", 
		"OnAnimation(function(unit, animation) ${1:$2(unit, animation) }end)",
		"OnUpdateBuff(function(unit, buff) ${1:$2(unit, buff) }end)",
		"OnRemoveBuff(function(unit, buff) ${1:$2(unit, buff) }end)",
		"OnGainVision(function(unit) ${1:$2(unit) }end)",
		"OnLoseVision(function(unit) ${1:$2(unit) }end)",
		"OnIssueOrder(function(order) ${1:$2(order) }end)",
		"OnSpellCast(function(spell) ${1:$2(spell) }end)",
		"OnDamage(function(unit, target, damage) ${1:$2(unit, target, damage) }end)",
		"OnAggro(function(unit, flag) ${1:$2(unit, flag) }end)",
		"OnProcessPacket(function(p) ${1:$2(p) }end)",
		"OnObjectLoop(function(obj, myHero) \n$1\nend)",
		"Callback.Add(\"${1:Load}\", ${2:func})",
		
		{"trigger": "LoadGOSScript\t(string)", "contents": "LoadGOSScript(\"${1:string}\")"},
		{"trigger": "MD5Encode\t(string)", "contents": "MD5Encode(\"${1:string}\")"},
		{"trigger": "Base64Encode\t(string)", "contents": "Base64Encode(\"${1:string}\")"},
		{"trigger": "Base64Decode\t(string)", "contents": "Base64Decode(\"${1:string}\")"},
		
		{"trigger": "PrintChat\t(string)", "contents": "PrintChat(\"${1:string}\")"},
		{"trigger": "MessageBox\t(string)", "contents": "MessageBox(0, \"${1:string}\", 0)"},
		{"trigger": "KeyIsDown\t(key)", "contents": "KeyIsDown(${1:key})"},
		{"trigger": "GetObjectType\t(Obj)", "contents": "GetObjectType(${1:Obj})"},
		{"trigger": "IsObjectAlive\t(Obj)", "contents": "IsObjectAlive(${1:Obj})"},
		{"trigger": "GetObjectName\t(Obj)", "contents": "GetObjectName(${1:Obj})"},
		{"trigger": "GetObjectBaseName\t(Obj)", "contents": "GetObjectBaseName(${1:Obj})"},
		{"trigger": "IsDead\t(Obj)", "contents": "IsDead(${1:Obj})"},
		{"trigger": "IsTargetable\t(Obj)", "contents": "IsTargetable(${1:Obj})"},
		{"trigger": "GetNetworkID\t(Obj)", "contents": "GetNetworkID(${1:Obj})"},
		{"trigger": "GetTeam\t(Obj)", "contents": "GetTeam(${1:Obj})"},
		{"trigger": "GetOrigin\t(Obj)", "contents": "GetOrigin(${1:Obj})"},
		{"trigger": "GetRange\t(Obj)", "contents": "GetRange(${1:Obj})"},
		{"trigger": "GetHitBox\t(Obj)", "contents": "GetHitBox(${1:Obj})"},
		{"trigger": "GetLevel\t(Obj)", "contents": "GetLevel(${1:Obj})"},
		{"trigger": "GetExperience\t(Obj)", "contents": "GetExperience(${1:Obj})"},
		{"trigger": "IsVisible\t(Obj)", "contents": "IsVisible(${1:Obj})"},
		{"trigger": "GetMoveSpeed\t(Obj)", "contents": "GetMoveSpeed(${1:Obj})"},
		{"trigger": "GetCurrentHP\t(Obj)", "contents": "GetCurrentHP(${1:Obj})"},
		{"trigger": "GetMaxHP\t(Obj)", "contents": "GetMaxHP(${1:Obj})"},
		{"trigger": "GetCurrentMana\t(Obj)", "contents": "GetCurrentMana(${1:Obj})"},
		{"trigger": "GetMaxMana\t(Obj)", "contents": "GetMaxMana(${1:Obj})"},
		{"trigger": "GetDmgShield\t(Obj)", "contents": "GetDmgShield(${1:Obj})"},
		{"trigger": "GetMagicShield\t(Obj)", "contents": "GetMagicShield(${1:Obj})"},
		{"trigger": "IsCampusUp\t(mob)", "contents": "IsCampusUp(${1:mob})"},
		{"trigger": "GetCDR\t(Obj)", "contents": "GetCDR(${1:Obj})"},
		{"trigger": "GetArmorPenFlat\t(Obj)", "contents": "GetArmorPenFlat(${1:Obj})"},
		{"trigger": "GetMagicPenFlat\t(Obj)", "contents": "GetMagicPenFlat(${1:Obj})"},
		{"trigger": "GetArmorPenPercent\t(Obj)", "contents": "GetArmorPenPercent(${1:Obj})"},
		{"trigger": "GetMagicPenPercent\t(Obj)", "contents": "GetMagicPenPercent(${1:Obj})"},
		{"trigger": "GetBaseDamage\t(Obj)", "contents": "GetBaseDamage(${1:Obj})"},
		{"trigger": "GetBonusDmg\t(Obj)", "contents": "GetBonusDmg(${1:Obj})"},
		{"trigger": "GetBonusAP\t(Obj)", "contents": "GetBonusAP(${1:Obj})"},
		{"trigger": "GetLifeSteal\t(Obj)", "contents": "GetLifeSteal(${1:Obj})"},
		{"trigger": "GetSpellVamp\t(Obj)", "contents": "GetSpellVamp(${1:Obj})"},
		{"trigger": "GetAttackSpeed\t(Obj)", "contents": "GetAttackSpeed(${1:Obj})"},
		{"trigger": "GetBaseAttackSpeed\t(Obj)", "contents": "GetBaseAttackSpeed(${1:Obj})"},
		{"trigger": "GetWindUp\t(Obj)", "contents": "GetWindUp(${1:Obj})"},
		{"trigger": "GetCritChance\t(Obj)", "contents": "GetCritChance(${1:Obj})"},
		{"trigger": "GetArmor\t(Obj)", "contents": "GetArmor(${1:Obj})"},
		{"trigger": "GetBaseArmor\t(Obj)", "contents": "GetBaseArmor(${1:Obj})"},
		{"trigger": "GetMagicResist\t(Obj)", "contents": "GetMagicResist(${1:Obj})"},
		{"trigger": "GetHPRegen\t(Obj)", "contents": "GetHPRegen(${1:Obj})"},
		{"trigger": "GetManaRegen\t(Obj)", "contents": "GetManaRegen(${1:Obj})"},
		{"trigger": "GotBuff\t(Obj, buffname)", "contents": "GotBuff(${1:Obj}, ${2:buffname})"},
		{"trigger": "GetBuffCount\t(Obj, index)", "contents": "GetBuffCount(${1:Obj}, ${2:index})"},
		{"trigger": "GetBuffName\t(Obj, index)", "contents": "GetBuffName(${1:Obj}, ${2:index})"},
		{"trigger": "GetItemSlot\t(Obj, itemID)", "contents": "GetItemSlot(${1:Obj}, ${2:itemID})"},
		{"trigger": "GetCastLevel\t(Obj, Spell)", "contents": "GetCastLevel(${1:Obj}, ${2:Spell})"},
		{"trigger": "GetCastRange\t(Obj, Spell)", "contents": "GetCastRange(${1:Obj}, ${2:Spell})"},
		{"trigger": "GetCastMana\t(Obj, Spell, Level)", "contents": "GetCastMana(${1:Obj}, ${2:Spell}, ${3:Level})"},
		{"trigger": "GetCastCooldown\t(Obj, Spell, Level)", "contents": "GetCastCooldown(${1:Obj}, ${2:Spell}, ${3:Level})"},
		{"trigger": "GetCastName\t(Obj, Spell)", "contents": "GetCastName(${1:Obj}, ${2:Spell})"},
		{"trigger": "IsImmune\t(target, myHero)", "contents": "IsImmune(${1:target}, ${2:myHero})"},
		{"trigger": "GetLatency\t()", "contents": "GetLatency()"},
		{"trigger": "GetFPS\t()", "contents": "GetFPS()"},
		{"trigger": "GetTickCount\t()", "contents": "GetTickCount()"},
		{"trigger": "CastTargetSpell\t(target, spell)", "contents": "CastTargetSpell(${1:target}, ${2:spell})"},
		{"trigger": "CastSpell\t(spell)", "contents": "CastSpell(${1:spell})"},
		{"trigger": "CastSkillShot\t(spell, pos)", "contents": "CastSkillShot(${1:spell}, ${2:pos})"},
		{"trigger": "CastSkillShot2\t(spell, pos)", "contents": "CastSkillShot2(${1:spell}, ${2:pos})"},
		{"trigger": "CastSkillShot3\t(spell, startPos, endPos)", "contents": "CastSkillShot3(${1:spell}, ${2:startPos}, ${3:endPos})"},
		{"trigger": "LevelSpell\t(spell)", "contents": "LevelSpell(${1:spell})"},
		{"trigger": "MoveToXYZ\t(pos)", "contents": "MoveToXYZ(${1:pos})"},
		{"trigger": "HoldPosition\t()", "contents": "HoldPosition()"},
		{"trigger": "AttackUnit\t(Obj)", "contents": "AttackUnit(${1:Obj})"},
		{"trigger": "BuyItem\t(ID)", "contents": "BuyItem(${1:ID})"},
		{"trigger": "DrawCircle\t(pos, width, quality, color)", "contents": "DrawCircle(${1:pos}, ${2:width}, ${3:quality}, ${4:color})"},
		{"trigger": "WorldToScreen\t(visfix, pos)", "contents": "WorldToScreen(${1:visfix}, ${2:pos})"},
		{"trigger": "WorldToMinimap\t(pos)", "contents": "WorldToMinimap(${2:pos})"},
		{"trigger": "DrawText\t(text, size, x, y, color)", "contents": "DrawText(${1:text}, ${2:size}, ${3:x}, ${4:y}, ${5:color})"},
		{"trigger": "DrawTextSmall\t(text, size, x, color)", "contents": "DrawTextSmall(${1:text}, ${2:size}, ${3:x}, ${4:color})"},
		{"trigger": "FillRect\t(x, y, width, height, color)", "contents": "FillRect(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:color})"},
		{"trigger": "DrawDmgOverHpBar\t(obj, currentHP, adDmg, apDmg, color)", "contents": "DrawDmgOverHpBar(${1:obj}, ${2:currentHP}, ${3:adDmg}, ${4:apDmg}, ${5:color})"},
		{"trigger": "GetMousePos\t()", "contents": "GetMousePos()"},
		{"trigger": "GetCurrentTarget\t()", "contents": "GetCurrentTarget()"},
		{"trigger": "GetPredictionForPlayer\t(startPos, target, moveSpeed, speed, delay, range, width, collision, addHitBox--[[boundingRadius]])", "contents": "GetPredictionForPlayer(${1:startPos}, ${2:target}, ${3:moveSpeed}, ${4:speed}, ${5:delay}, ${6:range}, ${7:width}, ${8:collision}, ${9:addHitBox--[[true/false]]})"},
		{"trigger": "ARGB\t(Opacity, Red, Green, Blue)", "contents": "ARGB(${1:Opacity}, ${2:Red}, ${3:Green}, ${4:Blue})"},
		{"trigger": "GetMapID\t()", "contents": "GetMapID()"},
		{"trigger": "GetCursorPos\t()", "contents": "GetCursorPos()"},
		{"trigger": "GetResolution\t()", "contents": "GetResolution()"},
		{"trigger": "DrawLine\t(x1, y1, x2, y2, width, color)", "contents": "DrawLine(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:width}, ${6:color})"},
		{"trigger": "DrawCircleMinimap\t(pos, radius, width, quality, color)", "contents": "DrawCircleMinimap(${1:pos}, ${2:radius}, ${3:width}, ${4:quality}, ${5:color})"},
		{"trigger": "GetItemID\t(Obj, slot)", "contents": "GetItemID(${1:Obj}, ${2:slot})"},
		{"trigger": "GetItemAmmo\t(Obj, slot)", "contents": "GetItemAmmo(${1:Obj}, ${2:slot})"},
		{"trigger": "GetItemStack\t(Obj, slot)", "contents": "GetItemStack(${1:Obj}, ${2:slot})"},
		{"trigger": "GetGameTimer\t()", "contents": "GetGameTimer()"},
		{"trigger": "GetBuffData\t()", "contents": "GetBuffData()"},
		{"trigger": "GetBuffType\t(Obj, index)", "contents": "GetBuffType(${1:Obj}, ${2:index})"},
		{"trigger": "GetBuffStacks\t(Obj, index)", "contents": "GetBuffStacks(${1:Obj}, ${2:index})"},
		{"trigger": "GetBuffStartTime\t(Obj, index)", "contents": "GetBuffStartTime(${1:Obj}, ${2:index})"},
		{"trigger": "GetBuffExpireTime\t(Obj, index)", "contents": "GetBuffExpireTime(${1:Obj}, ${2:index})"},
		{"trigger": "GetBuffTypeList\t(Obj, index)", "contents": "GetBuffTypeList(${1:Obj}, ${2:index})"},
		{"trigger": "GetBuffTypeToString\t(number)", "contents": "GetBuffTypeToString(${1:number})"},
		{"trigger": "IsChatOpened\t()", "contents": "IsChatOpened()"},
		{"trigger": "IsGameOnTop\t()", "contents": "IsGameOnTop()"},
		{"trigger": "CastEmote\t(emoteID)", "contents": "CastEmote(${1:emoteID})"},
		{"trigger": "GetDamagePrediction\t(Obj, delta)", "contents": "GetDamagePrediction(${1:Obj}, ${2:delta})"},
		{"trigger": "CreateSpriteFromFile\t(spriteName--[[startFrom SPRITE_PATH]], Scaling)", "contents": "CreateSpriteFromFile(\"${1:spriteName [startFrom SPRITE_PATH]}\", ${2:Scaling})"},
		{"trigger": "ReleaseSprite\t(spriteIndex)", "contents": "ReleaseSprite(${1:spriteIndex})"},
		{"trigger": "DrawSprite\t(spriteIndex, screenX, screenY, delWidth, delHight, width, height, color)", "contents": "DrawSprite(${1:spriteIndex}, ${2:screenX}, ${3:screenY}, ${4:delWidth}, ${5:delHight}, ${6:width}, ${7:height}, ${8:color})"},
		{"trigger": "GetObjectSpellName\t(Obj)", "contents": "GetObjectSpellName(${1:Obj})"},
		{"trigger": "GetObjectSpellOwner\t(Obj)", "contents": "GetObjectSpellOwner(${1:Obj})"},
		{"trigger": "GetObjectSpellStartPos\t(Obj)", "contents": "GetObjectSpellStartPos(${1:Obj})"},
		{"trigger": "GetObjectSpellEndPos\t(Obj)", "contents": "GetObjectSpellEndPos(${1:Obj})"},
		{"trigger": "GetObjectSpellPlacementPos\t(Obj)", "contents": "GetObjectSpellPlacementPos(${1:Obj})"},
		{"trigger": "GetObjectSpellTarget\t(Obj)", "contents": "GetObjectSpellTarget(${1:Obj})"},
		{"trigger": "GetObjectOwner\t(Obj)", "contents": "GetObjectOwner(${1:Obj})"},
		{"trigger": "HeroSkinChanger\t(Obj, skinID)", "contents": "HeroSkinChanger(${1:Obj}, ${2:skinID})"},
		{"trigger": "GetGameTarget\t()", "contents": "GetGameTarget()"},
		{"trigger": "IsGoSHumanizerActive\t()", "contents": "IsGoSHumanizerActive()"},
		{"trigger": "ModelChanger\t(Obj, skinID, modelName)", "contents": "ModelChanger(${1:Obj}, ${2:skinID}, \"${3:modelName}\")"},
		{"trigger": "GetObjectModelName\t(Obj)", "contents": "GetObjectModelName(${1:Obj})"},
		{"trigger": "GetLevelPoints\t(Obj)", "contents": "GetLevelPoints(${1:Obj})"},
		{"trigger": "BlockInput\t(true/false)", "contents": "BlockInput(${1:true/false})"},
		{"trigger": "BlockOrder\t()", "contents": "BlockOrder()"},
		{"trigger": "BlockCast\t()", "contents": "BlockCast()"},
		{"trigger": "GetUser\t()", "contents": "GetUser()"},
		{"trigger": "CreateDir\t(SPRITE_PATH, Folder'name)", "contents": "CreateDir(${1:SPRITE_PATH}..\"${2:Folder'name}\\\\\\\")"},
		{"trigger": "RemoveDir\t(SPRITE_PATH, Folder'name)", "contents": "RemoveDir(${1:SPRITE_PATH}..\"${2:Folder'name}\\\\\\\")"},
		{"trigger": "DirExists\t(SPRITE_PATH, Folder'name)", "contents": "DirExists(${1:SPRITE_PATH}..\"${2:Folder'name}\\\\\\\")"},
		{"trigger": "DeleteFile\t(FileName)", "contents": "DeleteFile(\"${1:FileName}\")"},
		{"trigger": "PlaySound\t(FileName)", "contents": "PlaySound(\"${1:FileName}\")"},
		{"trigger": "StopSound\t(FileName)", "contents": "StopSound(\"${1:FileName}\")"},
		{"trigger": "IsSubscriber\t(X, X)", "contents": "IsSubscriber(${1:X}, ${2:X})"},
		{"trigger": "GetGroup\t()", "contents": "GetGroup()"},
		{"trigger": "BlockF7OrbWalk(\t(true/false)", "contents": "BlockF7OrbWalk((${1:true/false})"},
		{"trigger": "BlockF7Dodge(\t(true/false)", "contents": "BlockF7Dodge((${1:true/false})"},
		{"trigger": "GetTextRect\t(text, size, x, y)", "contents": "GetTextRect(${1:text}, ${2:size}, ${3:x}, ${4:y})"},
		{"trigger": "Interact\t(Obj)", "contents": "Interact(${1:Obj})"},
		{"trigger": "ValidTarget\t(enemy, range)", "contents": "ValidTarget(${1:enemy}, ${2:range})"},
		{"trigger": "SetCursorPos\t(x, y)", "contents": "SetCursorPos(${1:x}, ${2:y}"},
		{"trigger": "GetDirection\t(Obj)", "contents": "GetDirection(${1:Obj})"},
		{"trigger": "GetObjByNetID\t(networkID)", "contents": "GetObjByNetID(${1:networkID})"},
		{"trigger": "GetBuffSourceNID\t(unit, buffID)", "contents": "GetBuffSourceNID(${1:unit}, ${2:buffID})"},
		{"trigger": "GetBuffSourceName\t(unit, buffID)", "contents": "GetBuffSourceName(${1:unit}, ${2:buffID})"},
		{"trigger": "DrawCircle3D\t(x, y, z, radius, width, color, quality)", "contents": "DrawCircle3D(${1:x}, ${2:y}, ${3:z}, ${4:radius}, ${5:width}, ${6:color}, ${7:quality})"},
		{"trigger": "DrawCircle2D\t(x, y, radius, width, color, quality)", "contents": "DrawCircle2D(${1:x}, ${2:y}, ${3:radius}, ${4:width}, ${5:color}, ${6:quality})"},
		{"trigger": "DrawRectangleOutline\t(startPos, endPos, range, width, color)", "contents": "DrawRectangleOutline(${1:startPos}, ${2:endPos}, ${3:range}, ${4:width}, ${5:color})"},
		{"trigger": "CountObjectsOnLineSegment\t(startPos, endPos, width, objTable, team)", "contents": "CountObjectsOnLineSegment(${1:startPos}, ${2:endPos}, ${3:width}, ${4:objTable}, ${5:team})"},
		{"trigger": "CountObjectsNearPos\t(pos, radius, radius, objTable, team)", "contents": "CountObjectsNearPos(${1:pos}, ${2:radius}, ${2:radius}, ${3:objTable}, ${4:team})"},
		{"trigger": "GetPercentHP\t(unit)", "contents": "GetPercentHP(${1:unit})"},
		{"trigger": "GetPercentMP\t(unit)", "contents": "GetPercentMP(${1:unit})"},
		{"trigger": "GetHPBarPos\t(Obj)", "contents": "GetHPBarPos(${1:Obj})"},
		{"trigger": "GetCurrentGold\t(Obj)", "contents": "GetCurrentGold(${1:Obj})"},
		{"trigger": "GetTotalEarnedGold\t(Obj)", "contents": "GetTotalEarnedGold(${1:Obj})"},
		{"trigger": "MenuConfig\t(\"saveID\", \"Name\")", "contents": "MenuConfig(\"${1:saveID}\", \"${2:Name}\")"},
		{"trigger": "FileExist\t(\"FilePath\")", "contents": "FileExist(${1:COMMON_PATH}..\"${2:File'path}.lua\")"},
		{"trigger": "DownloadFileAsync\t(\"link\", savePath, callback)", "contents": "DownloadFileAsync(\"${1:link}\", ${2:SCRIPT_PATH}..\"${3:File'name}.lua\", function() $4 end)"},
		{"trigger": "GetWebResultAsync\t(\"link\", callback(\"string\"))", "contents": "GetWebResultAsync(\"${1:link}\", function(str) \n\t$2\nend)"},

		"_Q",
		"_W",
		"_E",
		"_R",
		
		"ITEM_1",
		"ITEM_2",
		"ITEM_3",
		"ITEM_4",
		"ITEM_5", 
		"ITEM_6", 
		"ITEM_7",
		
		"SUMMONER_1",
		"SUMMONER_2",
		
		"READY",
		"NOTAVAILABLE",
		"NOTLEARNED",
		"READYNONCAST",
		"UNKNOWN",
		"ONCOOLDOWN",

		{"trigger": "Obj_AI_SpawnPoint\t\"obj_SpawnPoint\"", "contents": "Obj_AI_SpawnPoint"},
		{"trigger": "Obj_AI_Camp\t\"NeutralMinionCamp\"", "contents": "Obj_AI_Camp"},
		{"trigger": "Obj_AI_Barracks\t\"obj_BarracksDampener\"", "contents": "Obj_AI_Barracks"},
		{"trigger": "Obj_AI_Hero\t\"AIHeroClient\"", "contents": "Obj_AI_Hero"},
		{"trigger": "Obj_AI_Minion\t\"obj_AI_Minion\"", "contents": "Obj_AI_Minion"},
		{"trigger": "Obj_AI_Turret\t\"obj_AI_Turret\"", "contents": "Obj_AI_Turret"},
		{"trigger": "Obj_AI_LineMissle\t\"MissileClient\"", "contents": "Obj_AI_LineMissle"},
		{"trigger": "Obj_AI_Shop\t\"obj_Shop\"", "contents": "Obj_AI_Shop"},

		"CRYSTAL_SCAR",
		"TWISTED_TREELINE",
		"SUMMONERS_RIFT",
		"HOWLING_ABYSS",
		"RECALL",

		{"trigger": "name\t[obj/spell].name", "contents": "name"},
		".charName",
		".dead",
		".team",
		".valid",
		".visible",
		".level",
		".type",
		".pos",
		".pos2D",
		".x",
		".y",
		".z",
		{"trigger": "distance\t.Distance to myHero", "contents": "distance"},
		".networkID",
		".isInvulnerable",
		".isMelee",
		".isRanged",
		".isMe",
		".isStealthed",
		".isTaunted",
		".isCharmed",
		".isFeared",
		".isAsleep",
		".isNearSight",
		".isGhosted",
		".isFleeing",
		".isPoisoned",
		".isSpellShielded",
		".isTargetable",
		".range",
		".boundingRadius",
		{"trigger": "cdr\tCD Reduction", "contents": "cdr"},
		".health",
		".maxHealth",
		".mana",
		".maxMana",
		".hpRegen",
		".mpRegen",
		".critChance",
		".attackSpeed",
		".baseAttackSpeed",
		".windUp",
		".exp",
		".lifeSteal",
		".spellVamp",
		".physReduction",
		".magicReduction",
		".armorPen",
		".magicPen",
		".armorPenPercent",
		".bonusArmorPenPercent",
		".magicPenPercent",
		".totalDamage",
		".ap",
		".damage",
		".armor",
		".baseArmor",
		".magicArmor",
		".ms",
		".gold",
		".shieldAD",
		".shieldAP",
		".is",
		".isHero",
		".isMinion",
		".isTurret",
		".totalGold",
		".hpBarPos",
		".isRecalling",
		".isSpell",
		".spellName",
		".spellOwner",
		".startPos",
		".endPos",
		".placePos",
		".target",
		".owner",

		{"trigger": "Name\tbuff.Name", "contents": "Name"},
		{"trigger": "Type\tbuff.Type", "contents": "Type"},
		{"trigger": "Count\tbuff.Count", "contents": "Count"},
		{"trigger": "Stacks\tbuff.Stacks", "contents": "Stacks"},
		{"trigger": "StartTime\tbuff.StartTime", "contents": "StartTime"},
		{"trigger": "ExpireTime\tbuff.ExpireTime", "contents": "ExpireTime"},
		{"trigger": "SourceNID\tbuff.SourceNID", "contents": "SourceNID"},
		{"trigger": "SourceName\tbuff.SourceName", "contents": "SourceName"},

		".windUpTime",
		".animationTime",
		".castSpeed",
		".startPos",
		".endPos",
		".target",
		".animation",
		
		{"trigger": "Stop\t:()", "contents": "Stop()"},
		{"trigger": "Move\t:(x, z)", "contents": "Move(${1:x}, ${2:z})"},
		{"trigger": "Attack\t:(unit)", "contents": "Attack(${1:unit})"},
		{"trigger": "CastSpell\t:(slot)", "contents": "CastSpell(${1:slot})"},
		{"trigger": "CastSpell\t:(slot, unit)", "contents": "CastSpell(${1:slot}, ${2:unit})"},
		{"trigger": "CastSpell\t:(slot, x, z)", "contents": "CastSpell(${1:slot}, ${2:x}, ${3:z})"},
		{"trigger": "HasBuffType\t:(number)", "contents": "HasBuffType(${1:number})"},
		{"trigger": "CalcDamage\t:(unit, dmg)", "contents": "CalcDamage(${1:unit}, ${2:dmg})"},
		{"trigger": "CalcMagicDamage\t:(unit, dmg)", "contents": "CalcMagicDamage(${1:unit}, ${2:dmg})"},
		{"trigger": "GetSpellData\t:(slot)", "contents": "GetSpellData(${1:slot})"},
		{"trigger": "CanUseSpell\t:(slot)", "contents": "CanUseSpell(${1:slot})"},
		{"trigger": "GetBuff\t:(index)", "contents": "GetBuff(${1:index})"},
		{"trigger": "getBuff\t:(index)", "contents": "getBuff(${1:index})"},
		{"trigger": "GetItem\t:(slot)", "contents": "GetItem(${1:slot})"},
		{"trigger": "DistanceTo\t:(Obj)", "contents": "DistanceTo(${1:Obj})"},
		{"trigger": "DistanceTo\t:(x, y, z)", "contents": "DistanceTo(${1:x}, ${2:y}, ${3:z})"},
		{"trigger": "DistanceTo\t:(x, z)", "contents": "DistanceTo(${1:x}, ${2:z})"},
		{"trigger": "Draw\t:(radius, color)", "contents": "Draw(${1:radius}, ${2:color})"},
		{"trigger": "DrawDmg\t:(damage, color, currentHP)", "contents": "DrawDmg(${1:damage}, ${2:color}, ${3:currentHP})"},
		{"trigger": "Skin\t:(number)", "contents": "Skin(${1:number})"},
		{"trigger": "Model\t:(skinID, modelName)", "contents": "Model(${1:skinID}, \"${1:modelName}\")"},

		{"trigger": "Menu\t:(\"id\", \"subMemuName\")", "contents": "Menu(\"${1:id}\", \"${2:subMemuName}\")"},
		{"trigger": "Slider\t:(\"id\", \"name\", value, min, max, step, cb)", "contents": "Slider(\"${1:id}\", \"${2:name}\", ${3:currentVal}, ${4:minVal}, ${5:maxVal}, ${6:callback})"},
		{"trigger": "DropDown\t:(\"id\", \"name\", index, dropTable, cb)", "contents": "DropDown(\"${1:id}\", \"${2:name}\", ${3:index}, ${4:dropTable}, ${5:calback})"},
		{"trigger": "KeyBlinding\t:(\"id\", \"name\", key, isToggle, cb)", "contents": "KeyBlinding(\"${1:id}\", \"${2:name}\", ${3:key}, ${4:isToggle}, ${5:callback})"},
		{"trigger": "Boolean\t:(\"id\", \"name\", boolean, cb)", "contents": "Boolean(\"${1:id}\", \"${2:name}\", ${3:true/false}, ${4:callback})"},
		{"trigger": "ColorPick\t:(\"id\", \"name\", ARGB, cb)", "contents": "ColorPick(\"${1:id}\", \"${2:name}\", ${3:ARGB}, ${4:callback})"},
		{"trigger": "Info\t:(\"id\", \"info\")", "contents": "Info(\"${1:id}\", \"${2:infoHere}\")"},
		{"trigger": "Empty\t:(\"id\", value)", "contents": "Empty(\"${1:id}\", ${2:value})"},

		{"trigger": "Load_Analytics\tLogge's Analytics", "contents": "if FileExist(COMMON_PATH..\"Analytics.lua\") then\n\trequire(\"Analytics\")\n\tAnalytics(\"${1:ScriptName}\", \"${2:Author}\", ${3:printLoaded--[[true/false]]})\nelse\n\tDownloadFileAsync(\"https://raw.githubusercontent.com/LoggeL/GoS/master/Analytics.lua\", COMMON_PATH..\"Analytics.lua\", function()\n\t\trequire(\"Analytics\")\n\t\tAnalytics(\"${1:ScriptName}\", \"${2:Author}\", ${3:printLoaded--[[true/false]]})\n\tend)\nend\n"},
		{"trigger": "Load_ChallengerCommon\tDeftsu's ChallengerCommon", "contents": "if FileExist(COMMON_PATH..\"ChallengerCommon.lua\") then\n\trequire(\"ChallengerCommon\")\nelse\n\tPrintChat(string.format(\"<font color='#FFFFFF'>Please wait while downloading <b>ChallengerCommon.lua</b></font>\"))\n\tDownloadFileAsync(\"https://raw.githubusercontent.com/D3ftsu/GoS/master/Common/ChallengerCommon.lua\", COMMON_PATH..\"ChallengerCommon.lua\", function() PrintChat(string.format(\"<font color='#FFFFFF'>Downloaded <b>ChallengerCommon.lua</b>, please 2x F6!</font>\")) end) return\nend\n"},
		{"trigger": "Load_MixLib\tRyzuki's MixLib", "contents": "if FileExist(COMMON_PATH..\"MixLib.lua\") then\n\trequire(\"MixLib\")\nelse\n\tPrintChat(string.format(\"<font color='#FFFFFF'>Please wait while downloading <b>MixLib.lua</b></font>\"))\n\tDownloadFileAsync(\"https://raw.githubusercontent.com/VTNEETS/GoS/master/MixLib.lua\", COMMON_PATH..\"MixLib.lua\", function() PrintChat(string.format(\"<font color='#FFFFFF'>Downloaded <b>MixLib.lua</b>, please 2x F6!</font>\")) end) return\nend\n"}
	]
}
